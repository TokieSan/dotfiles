snippet pragma "pragmas" b
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")

$0
endsnippet

snippet orderedset "ordered set" b
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
endsnippet

snippet rng "random" b
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rnd(int l, int r) {return uniform_int_distribution<int>(l, r)(rng);}
ll rnd(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);}
endsnippet

snippet comp "comptetive programming base" b
#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/home/elt0khy/comp/debug.h"
#endif

#define rep(n) for (int i=0; i<n; i++)
#define V vector
#define all(x) (x).begin(), ((x).end())
using ll = long long;

int tc;

void solve() {
	$0
}

int main() {
	ios::sync_with_stdio(0), cin.tie(0);
	//freopen("in", "r", stdin);

	int t = 1; cin >> t;
	while( t-- ) tc++, solve();
	return 0;
}
endsnippet

snippet comb "combinatorics template" b
const int MAXN = 1e5 + 9;
const int MOD = 1e9 + 7;
ll fact[MAXN];

ll binpow(ll a, ll b) {
	a %= MOD;
	long long res = 1;
	while (b) {
		if (b & 1) res = res * a % MOD;
		a = a * a % MOD;
		b >>= 1;
	}
	return res;
}
void pre() {for(int i = 0; i < MAXN; i++) fact[i] = (i == 0 ? 1 : fact[i - 1] * i) % MOD;}
ll inv(ll a, ll b) {return (a * (binpow(b, MOD - 2) % MOD)) % MOD;}
ll npr(ll n, ll r) {return (r < n ? 0 : inv(fact[n], fact[n - r]) % MOD);}
ll ncr(ll n, ll r) {
    if(n - r < 0) return 0;
	return inv(fact[n], fact[n - r] * fact[r] % MOD);
}
endsnippet

snippet dsu "DSU" b
struct DSU {
	vector<int> e;
	void init(int N) {
		e = vector<int>(N, -1);
	}
	int get(int x) {
		return e[x] < 0 ? x : e[x] = get(e[x]);
	}
	bool sameSet(int a, int b) {
		return get(a) == get(b);
	}
	int size(int x) {
		return -e[get(x)];
	}
	bool unite(int x, int y) { // union by size
		x = get(x), y = get(y);
		if (x == y) return 0;
		if (e[x] > e[y]) swap(x, y);
		e[x] += e[y];
		e[y] = x;
		return 1;
	}
};
endsnippet

snippet sparse "Sparse Table" b
struct sparse {
	int log, n;
	vector<vector<int>> arr;
	int get(int&a, int&b) {
		return min(a, b);
	}
	sparse(vector<int>&b) {
		n = b.size();
		log = log2(n) + 1;
		arr.resize(n, vector<int>(log + 1));
		for(int i = 0; i < n; i++) arr[i][0] = b[i];
		for(int j = 1; j < log; j++)
			for(int i = 0; i < n - (1 << j) + 1; i++)
				arr[i][j] = get(arr[i][j - 1], arr[i + (1 << (j - 1))][j - 1]);
	}
	int query(int l, int r) {
		int j = r - l + 1;
		j = log2(j);
		return get(arr[l][j], arr[r + 1 - (1 << j)][j]);
	}
};
endsnippet

snippet sieve "Seive" b
vector <int> prime;
bool is_composite[MAXN];

void sieve (int n) {
	fill (is_composite, is_composite + n, false);
	for (int i = 2; i < n; ++i) {
		if (!is_composite[i]) prime.push_back (i);
		for (int j = 0; j < prime.size () && i * prime[j] < n; ++j) {
			is_composite[i * prime[j]] = true;
			if (i % prime[j] == 0) break;
		}
	}
}


endsnippet

snippet nextgr "next greater" b
const int N = 1e5 + 10;
int nge[N];
void next_greater(vector<int>&a) {
    int n = a.size();
    stack<int> s;
    for(int i = n; i; i--) { // 1-based
        while(!s.empty() && s.top() <= a[i]) s.pop();
        nge[i] = s.empty() ? -1 : s.top(); // make it a new array or whatever
        s.push(a[i]);
    }
}
endsnippet 

snippet compt "comptetive programming base" b
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
typedef priority_queue<int> pq;

#pragma GCC optimize("Ofast")
#pragma GCC target("fma,sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")

#define pb push_back
#define V vector
#define mp make_pair
#define F first
#define S second
#define rep(n) for (int i=0; i<n; i++)
#define rrep(n) for (int i=n-1; i>=0; i--)
#define FOR(i,a,n) for (auto i=a; i!=n; i++)
#define endl '\n'
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define sz(x) (int)(x).size()
#define _mem(a,n) memset(a,n,sz(a))
#define G(x) int x; cin >> x;
#define GG(x,y) int x,y; cin >> x >> y;
#define GGG(x,y,z) int x,y,z; cin >> x >> y >> z;
#define    PI		  3.14159265358979
#define    AREA(r)	  (PI*(r)*(r))
#define    MOD	  1000000007

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

ll binpow(ll a, ll b) {
	ll res = 1;
	while (b) {
		if(b&1) res = res * a % MOD;
		a=a*a%MOD;
		b>>=1LL;
	}
	return res;
}

template <typename T>
//Euler Divide
T div(T &a, T &b, T &P){
	return a*power(b, P-2)%P;
}

template <class T> 
bool sortbysec(const pair<T,T> &a, const pair<T,T> &b){
	return (a.second < b.second);
}

bool isFraction(double &a){
	if(a==static_cast<int>(a))  return true;
	else return false;
}

bool validLimits(int x, int y, int nx, int ny) {
	if(
			x<0 ||
			x>=nx ||
			y<0 ||
			y>=ny 
	  ) return false;
	return true;

}

ll add(ll x, ll y) {
	x += y;
	if (x >= MOD) return x - MOD;
	return x;
}
ll sub(ll x, ll y) {
	x -= y;
	if (x < 0) return x + MOD;
	return x;
}
ll mul(ll x, ll y) {  
	return (x * y) % MOD;
}

template <class T>
void print(V<T> &a){
	FOR(i, a.begin(), a.end())
		cout << *i << ' ';
	cout << '\n';
}
struct custom_hash {
	static uint64_t splitmix64(uint64_t x) {
		// http://xorshift.di.unimi.it/splitmix64.c
		x += 0x9e3779b97f4a7c15;
		x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
		x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
		return x ^ (x >> 31);
	}

	size_t operator()(uint64_t x) const {
		static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
		return splitmix64(x + FIXED_RANDOM);
	}
};
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
	enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
		sim > struct rge { c b, e; };
		sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
		sim > auto dud(c* x) -> decltype(cerr << *x, 0);
		sim > char dud(...);
		struct debug {
#ifdef LOCAL
			~debug() { cerr << endl; }
			eni(!=) cerr << boolalpha << i; ris; }
		eni(==) ris << range(begin(i), end(i)); }
		sim, class b dor(pair < b, c > d) {
			ris << "(" << d.first << ", " << d.second << ")";
		}
sim dor(rge<c> d) {
	*this << "[";
	for (auto it = d.b; it != d.e; ++it)
		*this << ", " + 2 * (it == d.b) << *it;
	ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "


void solve() {
	$0
}

/*
 * Is the answer binary searchable? Can the problem be split to halves?
 * Check the problem in reverse
 * n=1
 */
int main(int argc, char *argv[]) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);	
	//freopen(".in", "r", stdin);
	//freopen(".out", "w", stdout);
	int t = -1;
	if(t==-1) cin >> t;
	rep(t) {
		//cout << "Case " << i+1 << ": " << solve();
		solve();
	}
	return 0;
}
endsnippet

snippet cpp "normal cpp files"
#include <bits/stdc++.h>

using namespace std;

#define rep(n) for (int i=0; i<n; i++)
#define FOR(i,a,n) for (auto i=a; i!=n; i++)
#define V vector

int main(int argc, char *argv[]) {
	ios::sync_with_stdio(0);
	//freopen("in", "r", stdin);
	//freopen("out", "w", stdout);


	$0

		return 0;
}

endsnippet

snippet cntdig "count digits of an integer" A
int ans=0;
while($1!=0){
	ans+=($1)%10;
	$1/=10;
}
$0
endsnippet

snippet get "get integer"
int $1; cin >> $1;
$0
endsnippet

snippet for "for loop"
for(int i=$1; i<=$2; i$3){
	$4
}
$0
endsnippet

snippet all "l"
$1.begin(), $1.begin()+n
endsnippet
